
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://ujxbqwnbxtivwkbkbotb.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVqeGJxd25ieHRpdndrYmtib3RiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE3MTczNDIsImV4cCI6MjA1NzI5MzM0Mn0.JoVRkPTfqZrykD0kmPZnS2BtI8FUwEz4HCsQO2QKrBU";

// Get the current site URL for redirects
const getSiteUrl = () => {
  let url = window.location.origin;
  // Handle preview URLs or local development
  if (url.includes('localhost')) {
    return url;
  }
  return url;
};

// Extended supabase client with custom types
export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      flowType: 'pkce',
      autoRefreshToken: true,
      detectSessionInUrl: true,
      persistSession: true,
      storageKey: 'authentiya-auth-storage',
      storage: {
        getItem: (key) => {
          try {
            const value = window.localStorage.getItem(key);
            return value ? JSON.parse(value) : null;
          } catch (error) {
            console.error('Error getting item from localStorage', error);
            return null;
          }
        },
        setItem: (key, value) => {
          try {
            window.localStorage.setItem(key, JSON.stringify(value));
          } catch (error) {
            console.error('Error setting item in localStorage', error);
          }
        },
        removeItem: (key) => {
          try {
            window.localStorage.removeItem(key);
          } catch (error) {
            console.error('Error removing item from localStorage', error);
          }
        }
      }
    }
  }
);

// Helper to safely check if a query result has error
export const hasError = (
  result: { error: any } | null | undefined
): boolean => {
  return !!(result && 'error' in result && result.error);
};

// Type guard to check if data exists and is not an error
export function isDataNotError<T>(
  data: T | { error: any }
): data is T {
  return !hasError(data as any);
}

// Safe accessor for student assignment data
export const safeStudentAssignment = (assignment: any) => {
  if (!assignment || hasError(assignment)) {
    return null;
  }
  return assignment;
};
